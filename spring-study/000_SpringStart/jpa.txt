jpa - ORM(Object Relational dababase Mapping)
jpa를 사용하려면 EntityManager라는 객체를 주입받아야 한다.
spring에서 자동으로 설정 내용을 토대로 EntityManager를 생성해 준다.
jpa의 createQuery()메소드 안에 사용하는 쿼리를 jpql이라고 부른다.
jpa를 사용할 때는 항상 트랜잭션이 있어야 한다(서비스 클래스에 @Transactional).

- EntityManager(em) 메소드
em.persist(객체) : 객체를 db에 저장(insert)하고 Entity에도 반영한다.
em.find(Entity 클래스명, 컬럼값) : 
em.createQuery("select m from Member m", Member.class).getResultList();
: Member 객체에 대해서 Member 객체의 모든 속성값을 포함한 결과를 리스트로 반환해준다.
em.createQuery("select m from Member m where m.name = :name", Member.class)
                .setParameter("name", name)
                .getResultList();
: Member 객체에 대해 :name에 setParameter() 메소드로 파라미터를 지정해준 후 결과를 반환한다.


@GeneratedValue(strategy=GenerationType.IDENTITY)
identity : db가 자동으로 값을 생성해주는 것(mysql : auto_increment)

@ID : 기본키를 매핑해주는 어노테이션

@Column(name="db컬럼명") : db 컬럼명과 객체 속성명이 다를 경우 지정.

- 스프링 데이터 JPA
인터페이스를 통한 기본적인 CRUD를 제공한다(JpaRepository 인터페이스).
findByName(), findByEmail() 등처럼 메서드 이름만으로 조회 기능도 제공해준다.
페이징 기능도 자동으로 제공한다.

참고 : 실무에서는 JPA와 스프링 데이터 JPA를 기본적으로 사용하고, 
복잡한 동적 쿼리는 Querydsl이라는 라이브러리를 사용한다.
Querydsl을 사용하면 쿼리도 자바 코드로 안전하게 작성할 수 있고, 동적 쿼리도 편리하게 작성할 수 있다.
이외에 해결하기 어려운 쿼리는 JPA가 제공하는 네이티브 쿼리를 사용하거나, 앞서 학습한
스프링 JdbcTemplate를 사용하면 된다.

