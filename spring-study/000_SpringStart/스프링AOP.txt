- 스프링 AOP(Aspect Oriented Programming)
공통 관심 사항 vs 핵심 관심 사항
공통 관심 사항과 핵심 관심 사항을 분리한다.

- AOP 사용하지 않으면
공통 관심 사항과 핵심 관심 사항을 같이 적으면 유지 보수하기가 어렵다.
공통 관심 사항을 하나의 공통 로직으로 만들기가 어렵다.
또한 공통 관심 사항을 적용할 모든 로직을 찾아가서 변경해야 한다.

- AOP가 필요한 상황
1) 모든 메서드의 호출 시간을 측정하고 싶다면?
2) 공통 관심 사항(cross-cutting concern) vs 핵심 관심 사항(core concern)
3) 회원가입 시간, 회원조회 시간을 측정하고 싶다면?

- AOP 적용
공통 관심 사항을 명시할 클래스 위에는 @Aspect 어노테이션을 붙인다.
Aspect 클래스 위에 @Component 어노테이션을 붙여서 빈 객체를 생성해도 되지만,
SpringConfig 파일에 @Bean 어노테이션을 사용하여 생성하는 것이 의미적으로 더 좋다.
(SpringConfig 파일을 보면 AOP가 등록이 되어서 사용되는 구나를 한눈에 파악 가능하다.)
공통 관심 사항을 수행하는 메서드 위에는 @Around 어노테이션을 붙인다.
또한 공통 관심 메서드는 매개변수로 ProceedingJoinPoint 객체를 받는다.
joinPoint.toString() : 현재 실행되는 메서드의 반환타입 패키지명.클래스명.메서드명(매개변수)
@Around 어노테이션에는 공통 관심 사항을 적용할 범위를 매개변수로 준다.
ex) @Around("execution(* hello.hellospring..*(..))")

AOP가 없을 경우 컨트롤러가 바로 서비스를 호출한다.
참고 : 프록시(proxy)의 뜻은 대리권, 대리인이다.

- 스프링 AOP 동작방식(프록시 방식의 AOP)
1) 컨트롤러가 서비스를 호출했을 때 프록시 서비스를 생성하여 진짜 서비스 대신 호출을 받는다.
2) 프록시 서비스는 공통 관심 사항 메서드 내용을 실행하고 joinPoint.proceed()를 만나면
진짜 서비스를 실행해준다.
3) 진짜 서비스 실행이 완료되면 다시 프록시 서비스로 돌아와 joinPoing.proceed() 이후의
코드를 실행해준다.

- 강의 목차
1) 프로젝트 환경설정
프로젝트 생성
라이브러리 살펴보기
View 환경설정
빌드하고 실행하기
2) 스프링 웹 개발 기초
정적 컨텐츠
MVC와 템플릿 엔진
API
3) 회원 관리 예제 - 백엔드 개발
비즈니스 요구사항 정리
회원 도메인과 리포지토리 만들기
회원 리포지토리 테스트 케이스 작성
회원 서비스 개발
회원 서비스 테스트
4) 스프링 빈과 의존관계
컴포넌트 스캔과 자동 의존관계 설정
자바 코드로 직접 스프링 빈 등록하기
5) 회원 관리 예제 - 웹 MVC 개발
회원 웹 기능 - 홈 화면 추가
회원 웹 기능 - 등록
회원 웹 기능 - 조회
6) 스프링 DB 접근 기술
H2 데이터베이스 설치
순수 JDBC
스프링 통합 테스트
스프링 JdbcTemplate
JPA
스프링 데이터 JPA
7) AOP
AOP가 필요한 상황
AOP 적용