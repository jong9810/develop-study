<소개>
1. JPA가 지원하는 다양한 쿼리 방법
* JPQL
* JPA Criteria
* QueryDSL
* 네이티브 SQL
* JDBC API 직접 사용 / MyBatis, SpringJdbcTemplate 함께 사용

2. JPQL의 필요성
* JPA를 사용하면 엔티티 객체를 중심으로 개발한다.
* 문제는 검색을 할 때도 테이블이 아닌 엔티티 객체를 대상으로 검색한다는 것이다.
* 모든 db 데이터를 객체로 변환해서 검색하는 것을 불가능하므로
* 애플리케이션이 필요한 데이터만 db에서 불러오려면 결국 검색 조건이 포함된 SQL이 필요하다.
* 이러한 이유로 JPA는 SQL을 추상화한 JPQL이라는 객체 지향 쿼리 언어를 제공한다.

3. JPQL
* SQL과 문법이 유사 : SELECT/FROM/WHERE/GROUP BY/HAVING/JOIN을 지원한다(ANSI 표준 지원).
* JPQL은 엔티티 객체를 대상으로 쿼리한다.
* SQL을 추상화해서 특정 데이터베이스 SQL에 의존하지 않는다.
* JPQL을 한 마디로 정의하면 객체 지향 SQL이라고 할 수 있다.
* 참고 : SQL은 데이터베이스 테이블을 대상으로 쿼리한다.

4. JPQL 한계
* 쿼리문이 String이기 때문에 동적 쿼리를 만들기 힘들다.
* 이 문제를 해결하기 위해 JPA Criteria나 QueryDSL이 개발되었다.
* 참고 : MyBatis는 동적 쿼리를 짜기 편하다.

5. JPA Criteria(실무에서 잘 안 쓰임)
* 쿼리문을 문자열이 아닌 자바 코드로 작성할 수 있다.
* 자바 코드이기 때문에 컴파일 오류를 잡아준다.
* JPQL의 빌더 역할을 하고 JPQ의 공식 기능이다.
* 동적 쿼리를 짜기가 수월하다.
* 단점 : SQL처럼 보이지 않아서 가독성이 떨어지고 유지보수하기 어렵다.

6. QueryDSL(실무 사용 권장)
* 단점 : 오픈 소스 라이브러리이기 때문에 초반에 세팅이 복잡하다.
* 문자가 아닌 자바코드로 JPQL을 작성할 수 있다(JPQL 빌더 역할).
* 컴파일 시점에 문법 오류를 찾을 수 있다(자바 코드로 작성하기 때문).
* 동적 쿼리 작성이 편리하다.
* 단순하고 쉽다(JPQL과 거의 일대일 대응됨).

7. 네이티브 SQL(잘 안 씀)
* JPA가 제공하는 SQL을 직접 사용하는 기능이다.
* JPQL로 해결할 수 없는 특정 db에 의존적인 기능을 만들 때 사용한다.
* ex) 오라클 CONNECT BY, 특정 db만 사용하는 SQL 힌트

8. JDBC 직접 사용, SpringJdbcTemplate 등(네이티브 SQL보다 이 방법을 더 많이 씀)
* JPA를 사용하면서 JDBC 커넥션을 직접 사용하거나, 스프링 JdbcTemplate, MyBatis 등을 함께 사용 가능하다.
* 단 영속성 컨텍스트를 적절한 시점에 강제로 플러시하는 과정이 필요하다.
* JPA는 tx.commit()을 하는 순간에 db에 insert, update 쿼리를 날리기 때문에 JPA와 관련이 없는 기술을 사용하기 전에 flush를 해주어야 한다.
* ex) JPA를 우회해서 SQL을 실행하기 직전에 영속성 컨텍스트 수동 플러시
* 참고 : flush는 commit을 하거나 EntityManager를 통해 쿼리를 날리기 전에 자동으로 실행된다.



























































