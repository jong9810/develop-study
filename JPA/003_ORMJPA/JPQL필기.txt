<소개>
1. JPA가 지원하는 다양한 쿼리 방법
* JPQL
* JPA Criteria
* QueryDSL
* 네이티브 SQL
* JDBC API 직접 사용 / MyBatis, SpringJdbcTemplate 함께 사용

2. JPQL의 필요성
* JPA를 사용하면 엔티티 객체를 중심으로 개발한다.
* 문제는 검색을 할 때도 테이블이 아닌 엔티티 객체를 대상으로 검색한다는 것이다.
* 모든 db 데이터를 객체로 변환해서 검색하는 것을 불가능하므로
* 애플리케이션이 필요한 데이터만 db에서 불러오려면 결국 검색 조건이 포함된 SQL이 필요하다.
* 이러한 이유로 JPA는 SQL을 추상화한 JPQL이라는 객체 지향 쿼리 언어를 제공한다.

3. JPQL
* SQL과 문법이 유사 : SELECT/FROM/WHERE/GROUP BY/HAVING/JOIN을 지원한다(ANSI 표준 지원).
* JPQL은 엔티티 객체를 대상으로 쿼리한다.
* SQL을 추상화해서 특정 데이터베이스 SQL에 의존하지 않는다.
* JPQL을 한 마디로 정의하면 객체 지향 SQL이라고 할 수 있다.
* 참고 : SQL은 데이터베이스 테이블을 대상으로 쿼리한다.

4. JPQL 한계
* 쿼리문이 String이기 때문에 동적 쿼리를 만들기 힘들다.
* 이 문제를 해결하기 위해 JPA Criteria나 QueryDSL이 개발되었다.
* 참고 : MyBatis는 동적 쿼리를 짜기 편하다.

5. JPA Criteria(실무에서 잘 안 쓰임)
* 쿼리문을 문자열이 아닌 자바 코드로 작성할 수 있다.
* 자바 코드이기 때문에 컴파일 오류를 잡아준다.
* JPQL의 빌더 역할을 하고 JPQ의 공식 기능이다.
* 동적 쿼리를 짜기가 수월하다.
* 단점 : SQL처럼 보이지 않아서 가독성이 떨어지고 유지보수하기 어렵다.

6. QueryDSL(실무 사용 권장)
* 단점 : 오픈 소스 라이브러리이기 때문에 초반에 세팅이 복잡하다.
* 문자가 아닌 자바코드로 JPQL을 작성할 수 있다(JPQL 빌더 역할).
* 컴파일 시점에 문법 오류를 찾을 수 있다(자바 코드로 작성하기 때문).
* 동적 쿼리 작성이 편리하다.
* 단순하고 쉽다(JPQL과 거의 일대일 대응됨).

7. 네이티브 SQL(잘 안 씀)
* JPA가 제공하는 SQL을 직접 사용하는 기능이다.
* JPQL로 해결할 수 없는 특정 db에 의존적인 기능을 만들 때 사용한다.
* ex) 오라클 CONNECT BY, 특정 db만 사용하는 SQL 힌트

8. JDBC 직접 사용, SpringJdbcTemplate 등(네이티브 SQL보다 이 방법을 더 많이 씀)
* JPA를 사용하면서 JDBC 커넥션을 직접 사용하거나, 스프링 JdbcTemplate, MyBatis 등을 함께 사용 가능하다.
* 단 영속성 컨텍스트를 적절한 시점에 강제로 플러시하는 과정이 필요하다.
* JPA는 tx.commit()을 하는 순간에 db에 insert, update 쿼리를 날리기 때문에 JPA와 관련이 없는 기술을 사용하기 전에 flush를 해주어야 한다.
* ex) JPA를 우회해서 SQL을 실행하기 직전에 영속성 컨텍스트 수동 플러시
* 참고 : flush는 commit을 하거나 EntityManager를 통해 쿼리를 날리기 전에 자동으로 실행된다.

<JPQL 기본 문법과 쿼리 API>
* JPQL(Java Persistence Query Language)

1. JPQL 소개
* JPQL은 객체지향 쿼리 언어다(엔티티 객체를 대상으로 쿼리함).
* JPQL은 SQL을 추상화해서 특정 db에 SQL에 의존하지 않는다.
* JPQL은 결국 SQL로 변환된다. 

2. JPQL 문법
* JPQL은 SQL과 문법이 거의 동일하다.
* ex) select m from Member as m where m.age > 18;
* 엔티티와 속성은 대소문자를 구분한다(Member, age 등).
* JPQL 키워드는 대소문자를 구분하지 않는다(SELECT, from, Where 등).
* 테이블 이름이 아닌 엔티티 이름을 사용하여 쿼리문을 작성한다(Member).
* 별칭은 필수로 작성해야 한다(m, as는 생략 가능).

3. 집합과 정렬
* ANSI 표준에서 제공하는 함수들을 기본적으로 제공한다(count, sum, avg, max, min 등).
* group by, having, order by 모두 사용 가능하다.

4. TypedQuery, Query
* TypedQuery : 반환 타입이 명확할 때 사용한다.
* Query : 반환 타입이 명확하지 않을 떄 사용한다.
* ex) TypedQuery<Member> query = em.createQuery("select m from Member m", Member.class);
* ex) Query query = em.createQuery("select m.username, m.age from Member m");

5. 결과 조회 API
* query.getResultList() : 결과가 하나 이상일 때, 리스트를 반환한다(결과가 없으면 빈 리스트 반환, NullPointerExeption 발생하지 않음).
* query.getSingleResult() : 결과가 정확히 하나일 때, 단일 객체를 반환한다(잘 안 쓰임).
	* 결과가 없으면 : javax.persistence.NoResultException 에러
	* 둘 이상이면 : javax.persistence.NonUniqueResultException 에러
	* 참고 : 스프링 데이터 JPA를 사용하면 값이 없을 때 null이나 Optional을 반환해준다.

6. 파라미터 바인딩 - 이름 기준, 위치 기준
* 위치 기준 바인딩은 웬만하면 사용하지 말자(파라미터가 추가될 경우 에러 발생 가능성 있음).

<프로젝션(SELECT)>
1. 프로젝션 설명
* select 절에 조회할 대상을 지정하는 것이다.
* 프로젝션 대상 : 엔티티, 임베디드 타입, 스칼라 타입(숫자, 문자 등 기본 데이터 타입).
* distinct로 중복을 제거할 수 있다.
* ex)
1) select m from Member m -> 엔티티 프로젝션(영속성 컨텍스트에서 관리함)
2) select m.team from Member m -> 엔티티 프로젝션(조인 쿼리가 나감, 부작용 발생 가능성 있음)
3) select m.address from Member m -> 임베디드 타입 프로젝션
4) select m.username, m.age from Member m -> 스칼라 타입 프로젝션

2. 프로젝션 - 여러 값 조회
* ex) select m.username, m.age from Member m
(1) Query 타입으로 조회
(2) Object[] 타입으로 조회
(3) new 명령어로 조회
* 단순 값을 DTO로 바로 조회
* select new jpabook.jpql.UserDTO(m.username, m.age) from Member m
* 패키지 명을 포함한 전체 클래스 명 입력
* 순서와 타입이 일치하는 생성자 필요

<페이징>
1. 페이징 API
* JPA는 페이징을 다음 두 API로 추상화한다.
* setFirstResult(int startPosition) : 조회 시작 위치(0부터 시작).
* setMaxResults(int maxResult) : 조회할 데이터 수.

<조인>
1. 조인 설명
* 내부 조인 : select m from Member m [inner] join m.team t
* 외부 조인 : select m from Member m left [outer] join m.team t
* 세타 조인 : select ount(m) from Member m, Team t where m.username = t.name

2. 조인 - ON 절
* ON 절을 활용한 조인(JPA 2.1부터 지원)
(1) 미리 조인 대상 필터링해준다.
* ex) 회원과 팀을 조인하면서, 팀 이름이 A인 팀만 조인하는 경우
* t.name이 'A'인 데이터만 Team에서 가져온다.
* JPQL : select m, t from Member m left join m.team t on t.name = 'A'
* SQL : select m.*, t.* from Member m left join Team t on m.TEAM_ID = t.id and t.name = 'A'

(2) 연관관계 없는 엔티티 외부 조인할 수 있다(하이버네이트 5.1부터).
* ex) 회원의 이름과 팀의 이름이 같은 대상 외부 조인하는 경우
* JPQL : select m, t from Member m left join Team t on m.username = t.name
* SQL : select m.*, t.* from Member m left join Team t on m.username = t.name


<서브 쿼리>

<JPQL 타입 표현과 기타식>

<조건식(CASE 등)>

<JPQL 함수>

<경로 표현식>

<페치 조인1 - 기본>

<페치 조인2 - 한계>

<다형성 쿼리>

<엔티티 직접 사용>

<Named 쿼리>

<벌크 연산>























































