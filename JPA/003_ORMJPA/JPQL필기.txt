<소개>
1. JPA가 지원하는 다양한 쿼리 방법
* JPQL
* JPA Criteria
* QueryDSL
* 네이티브 SQL
* JDBC API 직접 사용 / MyBatis, SpringJdbcTemplate 함께 사용

2. JPQL의 필요성
* JPA를 사용하면 엔티티 객체를 중심으로 개발한다.
* 문제는 검색을 할 때도 테이블이 아닌 엔티티 객체를 대상으로 검색한다는 것이다.
* 모든 db 데이터를 객체로 변환해서 검색하는 것을 불가능하므로
* 애플리케이션이 필요한 데이터만 db에서 불러오려면 결국 검색 조건이 포함된 SQL이 필요하다.
* 이러한 이유로 JPA는 SQL을 추상화한 JPQL이라는 객체 지향 쿼리 언어를 제공한다.

3. JPQL
* SQL과 문법이 유사 : SELECT/FROM/WHERE/GROUP BY/HAVING/JOIN을 지원한다(ANSI 표준 지원).
* JPQL은 엔티티 객체를 대상으로 쿼리한다.
* SQL을 추상화해서 특정 데이터베이스 SQL에 의존하지 않는다.
* JPQL을 한 마디로 정의하면 객체 지향 SQL이라고 할 수 있다.
* 참고 : SQL은 데이터베이스 테이블을 대상으로 쿼리한다.

4. JPQL 한계
* 쿼리문이 String이기 때문에 동적 쿼리를 만들기 힘들다.
* 이 문제를 해결하기 위해 JPA Criteria나 QueryDSL이 개발되었다.
* 참고 : MyBatis는 동적 쿼리를 짜기 편하다.

5. JPA Criteria(실무에서 잘 안 쓰임)
* 쿼리문을 문자열이 아닌 자바 코드로 작성할 수 있다.
* 자바 코드이기 때문에 컴파일 오류를 잡아준다.
* JPQL의 빌더 역할을 하고 JPQ의 공식 기능이다.
* 동적 쿼리를 짜기가 수월하다.
* 단점 : SQL처럼 보이지 않아서 가독성이 떨어지고 유지보수하기 어렵다.

6. QueryDSL(실무 사용 권장)
* 단점 : 오픈 소스 라이브러리이기 때문에 초반에 세팅이 복잡하다.
* 문자가 아닌 자바코드로 JPQL을 작성할 수 있다(JPQL 빌더 역할).
* 컴파일 시점에 문법 오류를 찾을 수 있다(자바 코드로 작성하기 때문).
* 동적 쿼리 작성이 편리하다.
* 단순하고 쉽다(JPQL과 거의 일대일 대응됨).

7. 네이티브 SQL(잘 안 씀)
* JPA가 제공하는 SQL을 직접 사용하는 기능이다.
* JPQL로 해결할 수 없는 특정 db에 의존적인 기능을 만들 때 사용한다.
* ex) 오라클 CONNECT BY, 특정 db만 사용하는 SQL 힌트

8. JDBC 직접 사용, SpringJdbcTemplate 등(네이티브 SQL보다 이 방법을 더 많이 씀)
* JPA를 사용하면서 JDBC 커넥션을 직접 사용하거나, 스프링 JdbcTemplate, MyBatis 등을 함께 사용 가능하다.
* 단 영속성 컨텍스트를 적절한 시점에 강제로 플러시하는 과정이 필요하다.
* JPA는 tx.commit()을 하는 순간에 db에 insert, update 쿼리를 날리기 때문에 JPA와 관련이 없는 기술을 사용하기 전에 flush를 해주어야 한다.
* ex) JPA를 우회해서 SQL을 실행하기 직전에 영속성 컨텍스트 수동 플러시
* 참고 : flush는 commit을 하거나 EntityManager를 통해 쿼리를 날리기 전에 자동으로 실행된다.

<JPQL 기본 문법과 쿼리 API>
* JPQL(Java Persistence Query Language)

1. JPQL 소개
* JPQL은 객체지향 쿼리 언어다(엔티티 객체를 대상으로 쿼리함).
* JPQL은 SQL을 추상화해서 특정 db에 SQL에 의존하지 않는다.
* JPQL은 결국 SQL로 변환된다. 

2. JPQL 문법
* JPQL은 SQL과 문법이 거의 동일하다.
* ex) select m from Member as m where m.age > 18;
* 엔티티와 속성은 대소문자를 구분한다(Member, age 등).
* JPQL 키워드는 대소문자를 구분하지 않는다(SELECT, from, Where 등).
* 테이블 이름이 아닌 엔티티 이름을 사용하여 쿼리문을 작성한다(Member).
* 별칭은 필수로 작성해야 한다(m, as는 생략 가능).

3. 집합과 정렬
* ANSI 표준에서 제공하는 함수들을 기본적으로 제공한다(count, sum, avg, max, min 등).
* group by, having, order by 모두 사용 가능하다.

4. TypedQuery, Query
* TypedQuery : 반환 타입이 명확할 때 사용한다.
* Query : 반환 타입이 명확하지 않을 떄 사용한다.
* ex) TypedQuery<Member> query = em.createQuery("select m from Member m", Member.class);
* ex) Query query = em.createQuery("select m.username, m.age from Member m");

5. 결과 조회 API
* query.getResultList() : 결과가 하나 이상일 때, 리스트를 반환한다(결과가 없으면 빈 리스트 반환, NullPointerExeption 발생하지 않음).
* query.getSingleResult() : 결과가 정확히 하나일 때, 단일 객체를 반환한다(잘 안 쓰임).
	* 결과가 없으면 : javax.persistence.NoResultException 에러
	* 둘 이상이면 : javax.persistence.NonUniqueResultException 에러
	* 참고 : 스프링 데이터 JPA를 사용하면 값이 없을 때 null이나 Optional을 반환해준다.

6. 파라미터 바인딩 - 이름 기준, 위치 기준
* 위치 기준 바인딩은 웬만하면 사용하지 말자(파라미터가 추가될 경우 에러 발생 가능성 있음).

<프로젝션(SELECT)>
1. 프로젝션 설명
* select 절에 조회할 대상을 지정하는 것이다.
* 프로젝션 대상 : 엔티티, 임베디드 타입, 스칼라 타입(숫자, 문자 등 기본 데이터 타입).
* distinct로 중복을 제거할 수 있다.
* ex)
1) select m from Member m -> 엔티티 프로젝션(영속성 컨텍스트에서 관리함)
2) select m.team from Member m -> 엔티티 프로젝션(조인 쿼리가 나감, 부작용 발생 가능성 있음)
3) select m.address from Member m -> 임베디드 타입 프로젝션
4) select m.username, m.age from Member m -> 스칼라 타입 프로젝션

2. 프로젝션 - 여러 값 조회
* ex) select m.username, m.age from Member m
(1) Query 타입으로 조회
(2) Object[] 타입으로 조회
(3) new 명령어로 조회
* 단순 값을 DTO로 바로 조회
* select new jpabook.jpql.UserDTO(m.username, m.age) from Member m
* 패키지 명을 포함한 전체 클래스 명 입력
* 순서와 타입이 일치하는 생성자 필요

<페이징>
1. 페이징 API
* JPA는 페이징을 다음 두 API로 추상화한다.
* setFirstResult(int startPosition) : 조회 시작 위치(0부터 시작).
* setMaxResults(int maxResult) : 조회할 데이터 수.

<조인>
1. 조인 설명
* 내부 조인 : select m from Member m [inner] join m.team t
* 외부 조인 : select m from Member m left [outer] join m.team t
* 세타 조인 : select ount(m) from Member m, Team t where m.username = t.name

2. 조인 - ON 절
* ON 절을 활용한 조인(JPA 2.1부터 지원)
(1) 미리 조인 대상 필터링해준다.
* ex) 회원과 팀을 조인하면서, 팀 이름이 A인 팀만 조인하는 경우
* t.name이 'A'인 데이터만 Team에서 가져온다.
* JPQL : select m, t from Member m left join m.team t on t.name = 'A'
* SQL : select m.*, t.* from Member m left join Team t on m.TEAM_ID = t.id and t.name = 'A'

(2) 연관관계 없는 엔티티 외부 조인할 수 있다(하이버네이트 5.1부터).
* ex) 회원의 이름과 팀의 이름이 같은 대상 외부 조인하는 경우
* JPQL : select m, t from Member m left join Team t on m.username = t.name
* SQL : select m.*, t.* from Member m left join Team t on m.username = t.name

<서브 쿼리>
1. 서브 쿼리 예시
* 나이가 평균보다 많은 회원(메인 쿼리와 서브 쿼리가 연관되지 않음)
select m from Member m where m.age > (select avg(m2.age) from Member m2)

* 한 건이라도 주문한 고객(메인 쿼리와 서브 쿼리가 연관됨, 성능 저하)
select m from Member m where (select count(o) from Order o where m = o.member) > 0

2. 서브 쿼리 지원 함수
(1) [not] exists
* {all | any | some} (subquery)
* all : 모두 만족하면 참.
* any, some : 같은 의미, 조건을 하나라도 만족하면 참.

(2) [not] in (subquery)
* 서브 쿼리의 결과 중 하나라도 같은 것이 있으면 참.

3. 서브 쿼리 함수 - 예제
* 팀A 소속인 회원(exists)
select m from Member m where exists (select t from m.team t where t.name = '팀A')
* 전체 상품 각각의 재고보다 주문량이 많은 주문들(all)
select o from Order o where o.orderAmount > all (select p.stockAmount from Product p)
* 어떤 팀이든 팀에 소속된 회원(any)
select m from Member m where m.team = any (select t from Team t)

4. JPA 서브 쿼리 한계
* JPA는 where, having 절에서만 서브 쿼리를 사용할 수 있다(표준 스펙).
* select 절도 가능하다(하이버네이트에서 지원).
* from 절의 서브 쿼리는 현재 JPQL에서 불가능하다!(조인으로 풀 수 있으면 풀어서 해결, 안되면 포기)
* from 절 서브 쿼리를 어떻게 해서든 사용하고 싶으면 네이티브 SQL을 사용하거나, 
쿼리를 두 개로 나눠서 보낸 후 애플리케이션에서 조작해야 한다.

<JPQL 타입 표현과 기타식>
1. JPQL 타입 표현
* 문자 : 'HELLO', 'Sh''s'
* 숫자 : 10L(Long), 10D(Double), 10F(Float)
* Boolean : TRUE, FALSE
* ENUM : jpabook.MemberType.Admin (패키지명 포함)
* 엔티티 타입 : TYPE(m) = Member (상속 관계에서 사용)

2. JPQL 기타
* SQL과 문법이 거의 같다.
* exists, in
* and, or, not
* =, >, >=, <, <=, <>
* between, like, is null

<조건식(CASE 등)>
1. 조건식 - CASE 식
(1) 기본 CASE 식
select 
	case when m.age <= 10 then '학생요금'
	     when m.age >= 60 then '경로요금'
	     else '일반요금'
	end
from Member m

(2) 단순 CASE 식
select
	case t.name
		when '팀A' then '인센티브110%'
		when '팀B' then '인센티브120%'
		else '인센티브105%'
	end
from Team t

(3) COALESCE, NULLIF
* COALESCE : 하나씩 조회해서 null이 아니면 반환한다.
* ex) select coalesce(m.username, '이름 없는 회원') from Member m
* NULLIF : 두 값이 같으면 null을 반환하고 다르면 첫 번째 값을 반환한다.
* ex) select nullif(m.username, '관리자') from Member m
	

<JPQL 함수>
1. JPQL 기본 함수
* CONCAT
* SUBSTRING
* TRIM
* LOWER, UPPER
* LENGTH
* LOCATE
* ABS, SQRT, MOD
* SIZE, INDEX(JPA용도)

2. 사용자 정의 함수 호출
* 하이버네이트로 사용자 정의 함수를 사용하려면 방언에 추가해야 한다.
* 사용하는 DB 방언을 상속받고, 사용자 정의 함수를 정의한다.
* ex) select function('group_concat', i.name) from Item i

<경로 표현식>
1. 경로 표현식
* .(점)을 찍어 객체 그래프를 탐색하는 것.
select m.username -> 상태 필드
  from Member m
    join m.team t -> 단일 값 연관 필드
    join m.orders o -> 컬렉션 값 연관 필드
where t.name = '팀A'

2. 경로 표현식 용어 정리
* 상태 필드(state field) : 단순히 값을 저장하기 위한 필드(ex: m.username)
* 연관 필드(association field) : 연관관계를 위한 필드.
  * 단일 값 연관 필드 : @ManyToOnem, @OneToOne, 대상이 엔티티(ex: m.team)
  * 컬렉션 값 연관 필드 : @OneToMany, @ManyToMany, 대상이 컬렉션(ex: m.orders)

3. 경로 표현식 특징
* 상태 필드(state field) : 경로 탐색의 끝, 더 이상 탐색 불가.
* 단일 값 연관 경로 : 묵시적 내부 조인(inner join) 발생, 더 탐색하는 것도 가능(참고 : 값 타입인 경우에도 더 탐색 가능).
* 컬렉션 값 연관 경로 : 묵시적 내부 조인 발생, 탐색하지 않는다.
  * from 절에서 명시적조인을 통해 별칭을 얻으면 별칭을 통해 탐색하는 것도 가능하다.

4. 상태 필드 경로 탐색
* JPQL : select m.username, m.age from Member m
* SQL : select m.username, m.age from Member m

5. 단일 값 연관 경로 탐색
* JPQL : select o.member from Order o
* SQL
select m.* from Orders o
  inner join Member m on o.member_id = m.id

6. 명시적/묵시적 조인
* 명시적 조인 : join 키워드를 직접 사용하는 것.
select m from Member m join m.team t

* 묵시적 조인 : 경로 표현식에 의해 묵시적으로 SQL 조인이 발생하는 것(내부 조인만 가능).
select m.team from Member m

7. 경로 표현식 - 예제
* select o.member.team from Order o -> 성공(묵시적 조인 2번 발생)
* select t.members from Team t -> 성공(컬렉션 값 연관 경로 탐색, 더 탐색 불가능)
* select t.members.username from Team t -> 실패(컬렉션 값 연관 경로 탐색, username 탐색 불가능)
* select m.username from Team t join t.members m -> 성공(명시적 조인을 사용하면 더 탐색 가능함)

8. 경로 탐색을 사용한 묵시적 조인 시 주의사항
* 묵시적 조인은 항상 내부 조인이다.
* 컬렉션은 경로 탐색의 끝, 명시적 조인을 통해 별칭을 얻어야 한다.
* 경로 탐색은 주로 select, where 절에서 사용하지만 묵시적 조인으로 인해 SQL의 from(join) 절에 영향을 준다.

9. 실무 조언
* 가급적 묵시적 조인 대신에 명시적 조인을 사용하자.
* 조인은 SQL 튜닝에 중요한 포인트이다.
* 묵시적 조인은 조인이 일어나는 상황을 한눈에 파악하기 어렵다.

<페치 조인1 - 기본>
1. 페치 조인(fetch join)
* SQL 조인 종류가 아니고, JPQL에서 성능 최적화를 위해 제공하는 기능이다.
* 연관된 엔티티나 컬렉션을 SQL 한 번에 함께 조회하는 기능이다.
* 지연 로딩보다 페치 조인이 우선순위가 높다(지연로딩 + 페치 조인 => 페치 조인).
* join fetch 명령어로 사용한다.
* 페치 조인 ::= [left [outer] | inner] join fetch 조인경로

2. 엔티티 페치 조인
* 회원을 조회하면서 연관된 팀도 함께 조회한다(SQL 한 번에).
* SQL을 보면 회원 뿐만 아니라 팀(T.*)도 함께 select 한다.
* JPQL : select m from Member m join fetch m.team
* SQL : select M.*, T.* from MEMBER M inner join TEAM T on M.TEAM_ID = T.ID

3. 컬렉션 페치 조인
* 일대다 관계, 컬렉션 페치 조인.

(1) JPQL
select t 
from Team t join fetch t.members
where t.name = '팀A'

(2) SQL
select T.*, M.*
from team T 
inner join member M on T.ID = M.TEAM_ID
where T.name = '팀A'

4. 페치 조인과 DISTINCT
* SQL의 DISTINCT는 중복된 결과를 제거하는 명령이다.
* JPQL의 DISTINCT는 2가지 기능을 제공한다.
1) SQL에 DISTINCT를 추가한다.
2) 애플리케이션에서 엔티티 중복을 제거한다.

* JPQL
select distinct t
from Team t join fetch t.members
where t.name = '팀A'

* SQL에 DISTINCT를 추가하지만 데이터가 다르므로 SQL 결과에서 중복제거는 실패한다.
* 그렇기 때문에 JPQL에서 DISTINCT가 추가로 애플리케이션에서 중복제거를 시도한다(컬렉션에서같은 식별자를 가진 Team 엔티티를 제거).

5. 페치 조인과 일반 조인의 차이
* 일반 조인실행시 연관된 엔티티를 함께 조회하지 않는다(1 + N 문제 발생).
* JPQL
select t
from Team t join t.members m
where t.name = '팀A'

* SQL
select T.*
from Team t inner join Member M on T.id = M.team_id
where T.name = '팀A'

* JPQL은 결과를 반환할 때 연관관계를 고려하지 않는다.
* 단지 select 절에 지정한 엔티티만 조회할 뿐이다.
* 여기서는 팀 엔티티만 조회하고, 회원 엔티티는 조회하지 않는다.

* 페치 조인을 사용할 때만 연관된 엔티티를 함께 조회한다(명시적 즉시로딩).
* 페치 조인은 객체 그래프를 SQL 한 번에 조회하는 개념이다.

<페치 조인2 - 한계>
1. 페치 조인의 특징과 한계
* 페치 조인 대상에는 별칭을 줄 수 없다(주면 안됨)(하이버네이트는 가능하지만 가급적 사용하지 말자).
* 페치 조인은 기본적으로 연관된 엔티티를 전부 가져오는 것이기 때문에 별칭을 주어서 조건에 따라 가져올지 말지를 정하는 것은 안된다.
* 이런 경우에는 페치 조인을 사용하면 이상하게 동작할 수 있기 때문에 페치 조인을 사용하지 말고 따로 조회해야 한다(데이터 정합성, 객체 그래프 사상과 맞지 않음).
* 예외적으로 페치 조인을 여러 단계를 해야할 때는 사용하기도 한다.
* ex) select t from Team t join fetch t.members m join fetch m.team

* 둘 이상의 컬렉션은 페치 조인할 수 없다.
* ex) Team에 일대다 관계로 members가 있고 Member에 일대다 관계로 orders가 있다고 할 때 Team -> members -> orders로 페치 조인할 수 없다.
*     데이터 정합성 문제가 발생할 수 있다(일대 다대 다 관계, 예측하기 어려움)

* 컬렉션을 페치 조인(일대다 페치 조인)하면 페이징 API(setFirstResult, setMaxResults)를 사용할 수 없다(데이터가 뻥튀기 되기 때문).
  * 일대일, 다대일같은 단일 값 연관 필드들은 페치 조인해도 페이징이 가능하다.
  * 하이버네이트는 경고 로그를 남기고 메모리에서 페이징 처리를 한다(DB에서 데이터를 다 가져온 후 메모리에서 페이징 처리, 매우 위험).

* 컬렉션 페치 페이징 해결 방안
1) 일대다 관계를 뒤집어서 다대일 관계로 조회한 후 페이징하기.
2) 페치 조인을 사용하지 않고 지연로딩으로 페이징 처리하기(1 + N 문제 발생).
3) @BatchSize를 사용하여 한 번에 여러 개 식별자와 연관된 엔티티 조회하여 페이징 처리하기.
4) DTO를 만들어서 쿼리를 직접 짜는 것도 하나의 방법임.

2. 페치 조인 정리
* 연관된 엔티티들을 SQL 한번으로 조회한다(성능 최적화).
* 엔티티에 직접 적용하는 글로벌 로딩 전략보다 우선한다(글로벌 로딩 전략 : @OneToMany(fetch = FetchType.LAZY)).
* 실무에서 글로벌 로딩 전략은 모두 지연로딩으로 통일한다.
* 최적화가 필요한 곳은 페치 조인을 적용한다(대부분의 성능 문제는 해결됨, 1 + N 문제).

* 모든 것을 페치 조인으로 해결할 수는 없다.
* 페치 조인은 객체 그래프를 유지할 때 사용하면 효과적이다(연관된 모든 엔티티를 조회할 때).
* 여러 테이블을 조인해서 엔티티가 가진 모양이 아닌 전혀 다른 결과를 내야하면, 페치 조인보다는 일반 조인을 사용하고
  필요한 데이터들만 조회해서 DTO로 반환하는 것이 효과적이다.

<다형성 쿼리>
1. TYPE
* 조회 대상을 특정 자식으로 한정하는 것.

* ex) Item 중에 Book, Movie를 조회하라.
* JPQL
select i from Item i
where type(i) in (Book, Movie)
* SQL
select I.* from ITEM I
where I.DTYPE in ('B', 'M') 

2. TREAT(JPA 2.1)
* 자바의 타입 캐스팅과 유사한 개념이다.
* 상속 구조에서 부모 타입을 특정 자식 타입으로 다룰 때 사용한다.
* from, where, select(하이버네이트 지원) 절에 사용 가능하다.

* ex) 부모인 Item과 자식 Book이 있을 때,
* JPQL
select i from Item i
where treat(i as Book).author = 'kim'
* SQL
select I.* from ITEM I
where I.DTYPE = 'B' and I.author = 'kim'

<엔티티 직접 사용>
1. 엔티티 직접 사용 - 기본키 값
* JPQL에서 엔티티를 직접 사용하면 SQL에서 해당 엔티티의 기본키 값을 사용한다.

* ex1) select 절에 엔티티 직접 사용 | 식별자 사용
(1) JPQL
  1) select count(m.id) from Member m -> 엔티티의 아이디를 사용.
  2) select count(m) from Member m -> 엔티티를 직접 사용.
(2) SQL
     select count(m.id) as cnt from Member m -> 위 JPQL 두 문장 모두 다음 SQL을 실행함.

* ex2) where 절에 엔티티 직접 사용 | 식별자 사용
(1) JPQL
  1) 엔티티를 파라미터로 전달
    String jpql = "select m from Member m where m = :member";
    List resultList = em.createQuery(jpql)
	    .setParameter("member", member)
	    .getResultList();
  2) 식별자를 직접 전달
    String jpql = "select m from Member m where m.id = :memberId";
    List resultList = em.createQuery(jpql)
	    .setParameter("memberId", memberId)
	    .getResultList();
(2) SQL
    select m.* from Member m where m.id = ?

2. 엔티티 직접 사용 - 외래키 값
(1) JPQL
  1) 엔티티 직접 사용
    Team team = em.find(Team.class, 1L);
    String query = "select m from Member m where m.team = :team";
    List<Member> result = em.createQuery(query, Member.class)
	    .setParameter("team", team)
	    .getResultList();
  2) 식별자 사용
    String query = "select m from Member m where m.team.id = :teamId";
    List<Member> result = em.createQuery(query, Member.class)
	    .setParameter("teamId", teamId)
	    .getResultList();
(2) SQL
    select M.* from MEMBER M where M.team_id = ?

<Named 쿼리>
1. Named 쿼리 - 어노테이션
* ex)
// Named 쿼리 정의
@Entity
@NamedQuery(
	name = "Member.findByUsername",
	query = "select m from Member m where m.username = :username"
)
public class Member { ... }

// Named 쿼리 사용
List<Member> result = em.createNamedQuery("Member.findByUsername", Member.class)
	.setParameter("username", "회원1")
	.getResultList();

2. Named 쿼리 - 정적 쿼리
* 미리 정의해서 이름을 부여해두고 사용하는 JPQL이다.
* 정적 쿼리만 가능하다(더 이상 문자열을 더하는 것이 불가능).
* 어노테이션 or XML에 정의한다.
* 애플리케이션 로딩 시점에 초기화 후 재사용이 가능하다(JPA나 hibernate가 Named 쿼리를 SQL로 파싱해서 캐시함).
* 애플리케이션 로딩 시점에 쿼리를 검증할 수 있다(파싱 시점에 검증 수행, 실행 시점에 Syntax 에러 등 발생).

3. Named 쿼리 - XML에 정의(잘 안 쓰임)
[Meta-INF/persistence.xml]
<persistence-unit name="jpabook">
	<mapping-file>META-INF/ormMember.xml</mapping-file>
</persistence-unit>

[META-INF/ormMember.xml]
<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="https://xmlns.jcp.org/xml/ns/persistence/orm" version="2.1">
	<named-query name="Member.findByUsername">
		<query><![CDATA[
			select m from Member m where m.username = :username
		]]</query>
	</named-query>

	...
</entity-mappings>

4. Named 쿼리 환경에 따른 설정
* XML이 항상 우선권을 가진다.
* 애플리케이션 운영 환경에 따라 다른 XML을 배포할 수 있다.

* 참고 : 스프링 데이터 JPA에서 interface 메서드 위에 @Query 어노테이션으로 쿼리를 정의하면 Named 쿼리에 등록된다(이름 없는 Named 쿼리).

<벌크 연산>
1. 벌크 연산
* ex) 재고가 10개 미만인 모든 상품의 가격을 10% 상승하려면?
* JPA 변경 감지 기능으로 실행하려면 너무 많은 SQL을 실행해야 한다.
  * 1) 재고가 10개 미만인 상품을 리스트로 조회한다.
  * 2) 상품 엔티티의 가격을 10% 증가시킨다.
  * 3) 트랜잭션 커밋 시점에 변경 감지가 동작한다.
* 변경하려고 하는 데이터가 100건이라면 100번의 update sql이 실행된다.

2. 벌크 연산 예제
* 쿼리 한 번으로 여러 테이블 로우를 변경한다(엔티티)
* excuteUpdate()의 결과는 영향받은 엔티티 수를 반환한다.
* update, delete를 지원한다.
* insert(insert into .. select, 하이버네이트에서 지원)
* ex) 
String query = "update Product p set p.price = p.price * 1.1 where p.stockAmount < :stockAmount";
int resultCnt = em.createQuery(query)
	.setParameter("stockAmount", 10)
	.executeUpdate();

3. 벌크 연산 주의
* 벌크 연산은 영속성 컨텍스트를 무시하고 데이터베이스에 직접 쿼리를 한다.
* 벌크 연산을 수행하기 전에 JPA가 자동으로 em.flush()를 호출한다. 
* 벌크 연산 사용법(2가지)
  1) 벌크 연산을 먼저 실행(영속성 컨텍스트가 빈 상태에서).
  2) 벌크 연산을 수행 후 영속성 컨텍스트 초기화(em.clear(), 웬만하면 해주는 게 좋음).

* 참고 : 스프링 데이터 JPA에서 @Modifying을 사용하면 벌크 연산을 수행할 수 있다(clearAutomatically 속성 : em.clear() 자동 수행 여부).
* 참고 : 식별자로 조회하여 벌크 연산으로 값을 업데이트하거나 삭제해도 되지만 JPA가 제공하는 변경 감지를 사용하는 것이 더 낫다.